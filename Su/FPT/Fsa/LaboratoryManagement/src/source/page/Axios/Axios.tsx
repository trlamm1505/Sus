import axios, { type AxiosInstance, type AxiosRequestConfig, type AxiosResponse, type AxiosError, type InternalAxiosRequestConfig } from 'axios';

// Base URL cho API - s·ª≠ d·ª•ng proxy trong development
const BASE_URL = (typeof window !== 'undefined' && (window as any).REACT_APP_API_URL) || '/api';

// T·∫°o instance axios v·ªõi c·∫•u h√¨nh c∆° b·∫£n
const axiosInstance: AxiosInstance = axios.create({
    baseURL: BASE_URL,
    timeout: 10000, // 10 seconds timeout
    headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
    },
});

// Request Interceptor - Th√™m token v√†o header
axiosInstance.interceptors.request.use(
    (config: InternalAxiosRequestConfig) => {
        // L·∫•y token t·ª´ localStorage
        const token = localStorage.getItem('token');

        if (token && config.headers) {
            config.headers.Authorization = `Bearer ${token}`;
        }

        // Log request (ch·ªâ trong development)
        if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
            console.log('üöÄ Request:', {
                method: config.method?.toUpperCase(),
                url: config.url,
                data: config.data,
                headers: config.headers,
            });
        }

        return config;
    },
    (error: AxiosError) => {
        console.error('‚ùå Request Error:', error);
        return Promise.reject(error);
    }
);

// Response Interceptor - X·ª≠ l√Ω response v√† error
axiosInstance.interceptors.response.use(
    (response: AxiosResponse) => {
        // Log response (ch·ªâ trong development)
        if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
            console.log('‚úÖ Response:', {
                status: response.status,
                data: response.data,
                url: response.config.url,
            });
        }

        return response;
    },
    (error: AxiosError) => {
        // X·ª≠ l√Ω c√°c l·ªói HTTP
        if (error.response) {
            const { status, data } = error.response;

            switch (status) {
                case 401:
                    // Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá
                    console.error('üîí Unauthorized - Token expired or invalid');
                    localStorage.removeItem('token');
                    localStorage.removeItem('userRole');
                    localStorage.removeItem('userId');
                    // Redirect to login page
                    window.location.href = '/login';
                    break;

                case 403:
                    console.error('üö´ Forbidden - Access denied');
                    break;

                case 404:
                    console.error('üîç Not Found - Resource not found');
                    break;

                case 422:
                    console.error('üìù Validation Error:', data);
                    break;

                case 500:
                    console.error('üí• Server Error - Internal server error');
                    break;

                default:
                    console.error(`‚ùå HTTP Error ${status}:`, data);
            }
        } else if (error.request) {
            // Network error
            console.error('üåê Network Error:', error.message);
        } else {
            // Other error
            console.error('‚ùå Error:', error.message);
        }

        return Promise.reject(error);
    }
);

// API Methods
export const api = {
    // GET request
    get: <T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {
        return axiosInstance.get<T>(url, config);
    },

    // POST request
    post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {
        return axiosInstance.post<T>(url, data, config);
    },

    // PUT request
    put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {
        return axiosInstance.put<T>(url, data, config);
    },

    // PATCH request
    patch: <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {
        return axiosInstance.patch<T>(url, data, config);
    },

    // DELETE request
    delete: <T = any>(url: string, config?: AxiosRequestConfig): Promise<AxiosResponse<T>> => {
        return axiosInstance.delete<T>(url, config);
    },
};

// Auth API endpoints
export const authAPI = {
    // ƒêƒÉng nh·∫≠p
    login: (credentials: { username: string; password: string }) => {
        return api.post('/auth/login', credentials);
    },

    // ƒêƒÉng k√Ω
    register: (userData: { username: string; password: string; email: string; fullName: string; role: string }) => {
        return api.post('/auth/register', userData);
    },

    // Qu√™n m·∫≠t kh·∫©u - g·ª≠i email
    forgotPassword: (email: string) => {
        return api.post('/auth/forgot-password', { email });
    },

    // ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u v·ªõi token
    resetPassword: (token: string, newPassword: string) => {
        return api.post(`/auth/reset-password/${token}`, { newPassword });
    },
};

// Utility functions
export const setAuthToken = (token: string) => {
    localStorage.setItem('token', token);
    axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;
};

export const removeAuthToken = () => {
    localStorage.removeItem('token');
    delete axiosInstance.defaults.headers.common['Authorization'];
};

// Export default instance
export default axiosInstance;
